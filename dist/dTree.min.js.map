{"version":3,"sources":["dTree.min.js","dTree.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","protoProps","staticProps","prototype","global","factory","exports","module","define","amd","dTree","this","TreeBuilder","root","siblings","opts","DEBUG_LEVEL","debug","allNodes","_flatten","nodeSize","callbacks","call","_","filter","node","hidden","get","nodeWidth","textRenderer","marriageSize","marriageNodeSize","value","width","margin","left","right","height","top","bottom","zoom","d3","scaleExtent","on","g","attr","event","transform","svg","select","append","zoomIdentity","translate","scale","tree","nodeHeightSeperation","separation","a","b","data","_update","source","treenodes","links","selectAll","enter","l","noParent","styles","linage","_elbow","nodes","descendants","_linkSiblings","marriage","bind","_siblingLine","d","Math","round","x","cWidth","y","cHeight","id","html","isMarriage","marriageRenderer","extra","nodeRenderer","name","textClass","stopPropagation","detail","marriageClick","nodeClick","preventDefault","marriageRightClick","nodeRightClick","recurse","children","forEach","n","push","ny","linedata","fun","line","curve","curveStepAfter","start","v","end","marriageId","marriageNode","find","nodeHeight","number","nodeMaxHeight","maxHeight","tmpSvg","document","createElement","body","appendChild","map","container","setAttribute","style","visibility","maxWidth","text","innerHTML","offsetHeight","removeChild","max","size","nodeClass","msg","console","log","VERSION","init","_zoomTo","arguments","undefined","duration","treeBuilder","transition","options","defaultsDeep","hideMarriageNodes","_nodeHeightSeperation","_nodeRenderer","_nodeSize","nodeSorter","aName","aExtra","bName","bExtra","_textRenderer","_marriageRenderer","_marriageSize","_preprocess","create","resetZoom","zoomTo","zoomToNode","nodeId","zoomToFit","groupBounds","getBBox","fullWidth","clientWidth","fullHeight","clientHeight","reconstructTree","person","parent","class","depthOffset","pushNode","_sortPersons","child","_sortMarriages","marriages","index","m","sp","spouse","hierarchy","persons","sort","Array","isArray","marriageA","marriageB"],"mappings":"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","file":"dTree.min.js","sourcesContent":["var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() : typeof define === 'function' && define.amd ? define(factory) : global.dTree = factory();\n})(this, function () {\n  'use strict';\n\n  var TreeBuilder = (function () {\n    function TreeBuilder(root, siblings, opts) {\n      _classCallCheck(this, TreeBuilder);\n\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\n\n      this.root = root;\n      this.siblings = siblings;\n      this.opts = opts;\n\n      // flatten nodes\n      this.allNodes = this._flatten(this.root);\n\n      // calculate node sizes\n      this.nodeSize = opts.callbacks.nodeSize.call(this,\n      // filter hidden and marriage nodes\n      _.filter(this.allNodes, function (node) {\n        return !(node.hidden || _.get(node, 'data.isMarriage'));\n      }), opts.nodeWidth, opts.callbacks.textRenderer);\n      this.marriageSize = opts.callbacks.marriageSize.call(this,\n      // filter hidden and non marriage nodes\n      _.filter(this.allNodes, function (node) {\n        return !node.hidden && _.get(node, 'data.isMarriage');\n      }), this.opts.marriageNodeSize);\n    }\n\n    _createClass(TreeBuilder, [{\n      key: 'create',\n      value: function create() {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n\n        var width = opts.width + opts.margin.left + opts.margin.right;\n        var height = opts.height + opts.margin.top + opts.margin.bottom;\n\n        // create zoom handler\n        var zoom = this.zoom = d3.zoom().scaleExtent([0.1, 10]).on('zoom', function () {\n          g.attr('transform', d3.event.transform);\n        });\n\n        // make a svg\n        var svg = this.svg = d3.select(opts.target).append('svg').attr('viewBox', [0, 0, width, height]).call(zoom);\n\n        // create svg group that holds all nodes\n        var g = this.g = svg.append('g');\n\n        // set zoom identity\n        svg.call(zoom.transform, d3.zoomIdentity.translate(width / 2, opts.margin.top).scale(1));\n\n        // Compute the layout.\n        this.tree = d3.tree().nodeSize([nodeSize[0] * 2, opts.callbacks.nodeHeightSeperation.call(this, nodeSize[0], nodeSize[1])]);\n\n        this.tree.separation(function separation(a, b) {\n          if (a.data.hidden || b.data.hidden) {\n            return 0.3;\n          } else {\n            return 0.6;\n          }\n        });\n\n        this._update(this.root);\n      }\n    }, {\n      key: '_update',\n      value: function _update(source) {\n\n        var opts = this.opts;\n        var allNodes = this.allNodes;\n        var nodeSize = this.nodeSize;\n        var marriageSize = this.marriageSize;\n\n        var treenodes = this.tree(source);\n        var links = treenodes.links();\n\n        // Create the link lines.\n        this.g.selectAll('.link').data(links).enter()\n        // filter links with no parents to prevent empty nodes\n        .filter(function (l) {\n          return !l.target.data.noParent;\n        }).append('path').attr('class', opts.styles.linage).attr('d', this._elbow);\n\n        var nodes = this.g.selectAll('.node').data(treenodes.descendants()).enter();\n\n        this._linkSiblings();\n\n        // Draw siblings (marriage)\n        this.g.selectAll('.sibling').data(this.siblings).enter().append('path').attr('class', opts.styles.marriage).attr('d', _.bind(this._siblingLine, this));\n\n        // Create the node rectangles.\n        nodes.append('foreignObject').filter(function (d) {\n          return d.data.hidden ? false : true;\n        }).attr('x', function (d) {\n          return Math.round(d.x - d.cWidth / 2) + 'px';\n        }).attr('y', function (d) {\n          return Math.round(d.y - d.cHeight / 2) + 'px';\n        }).attr('width', function (d) {\n          return d.cWidth + 'px';\n        }).attr('height', function (d) {\n          return d.cHeight + 'px';\n        }).attr('id', function (d) {\n          return d.id;\n        }).html(function (d) {\n          if (d.data.isMarriage) {\n            return opts.callbacks.marriageRenderer.call(this, d.x, d.y, marriageSize[0], marriageSize[1], d.data.extra, d.data.id, d.data['class']);\n          } else {\n            return opts.callbacks.nodeRenderer.call(this, d.data.name, d.x, d.y, nodeSize[0], nodeSize[1], d.data.extra, d.data.id, d.data['class'], d.data.textClass, opts.callbacks.textRenderer);\n          }\n        }).on('dblclick', function () {\n          // do not propagate a double click on a node\n          // to prevent the zoom from being triggered\n          d3.event.stopPropagation();\n        }).on('click', function (d) {\n          // ignore double-clicks and clicks on hidden nodes\n          if (d3.event.detail === 2 || d.data.hidden) {\n            return;\n          }\n          if (d.data.isMarriage) {\n            opts.callbacks.marriageClick.call(this, d.data.extra, d.data.id);\n          } else {\n            opts.callbacks.nodeClick.call(this, d.data.name, d.data.extra, d.data.id);\n          }\n        }).on('contextmenu', function (d) {\n          if (d.data.hidden) {\n            return;\n          }\n          d3.event.preventDefault();\n          if (d.data.isMarriage) {\n            opts.callbacks.marriageRightClick.call(this, d.data.extra, d.data.id);\n          } else {\n            opts.callbacks.nodeRightClick.call(this, d.data.name, d.data.extra, d.data.id);\n          }\n        });\n      }\n    }, {\n      key: '_flatten',\n      value: function _flatten(root) {\n        var n = [];\n        var i = 0;\n\n        function recurse(node) {\n          if (node.children) {\n            node.children.forEach(recurse);\n          }\n          if (!node.id) {\n            node.id = ++i;\n          }\n          n.push(node);\n        }\n        recurse(root);\n        return n;\n      }\n    }, {\n      key: '_elbow',\n      value: function _elbow(d, i) {\n        if (d.target.data.noParent) {\n          return 'M0,0L0,0';\n        }\n        var ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\n\n        var linedata = [{\n          x: d.target.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: ny\n        }, {\n          x: d.source.x,\n          y: d.source.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }, {\n      key: '_linkSiblings',\n      value: function _linkSiblings() {\n\n        var allNodes = this.allNodes;\n\n        _.forEach(this.siblings, function (d) {\n          var start = allNodes.filter(function (v) {\n            return d.source.id == v.data.id;\n          });\n          var end = allNodes.filter(function (v) {\n            return d.target.id == v.data.id;\n          });\n          d.source.x = start[0].x;\n          d.source.y = start[0].y;\n          d.target.x = end[0].x;\n          d.target.y = end[0].y;\n\n          var marriageId = start[0].data.marriageNode != null ? start[0].data.marriageNode.id : end[0].data.marriageNode.id;\n          var marriageNode = allNodes.find(function (n) {\n            return n.data.id == marriageId;\n          });\n          d.source.marriageNode = marriageNode;\n          d.target.marriageNode = marriageNode;\n        });\n      }\n    }, {\n      key: '_siblingLine',\n      value: function _siblingLine(d, i) {\n\n        var ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\n        var nodeWidth = this.nodeSize[0];\n        var nodeHeight = this.nodeSize[1];\n\n        // Not first marriage\n        if (d.number > 0) {\n          ny -= Math.round(nodeHeight * 8 / 10);\n        }\n\n        var linedata = [{\n          x: d.source.x,\n          y: d.source.y\n        }, {\n          x: Math.round(d.source.x + nodeWidth * 6 / 10),\n          y: d.source.y\n        }, {\n          x: Math.round(d.source.x + nodeWidth * 6 / 10),\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: ny\n        }, {\n          x: d.target.marriageNode.x,\n          y: d.target.y\n        }, {\n          x: d.target.x,\n          y: d.target.y\n        }];\n\n        var fun = d3.line().curve(d3.curveStepAfter).x(function (d) {\n          return d.x;\n        }).y(function (d) {\n          return d.y;\n        });\n        return fun(linedata);\n      }\n    }], [{\n      key: '_nodeHeightSeperation',\n      value: function _nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n        return nodeMaxHeight + 25;\n      }\n    }, {\n      key: '_nodeSize',\n      value: function _nodeSize(nodes, width, textRenderer) {\n        var maxWidth = 0;\n        var maxHeight = 0;\n        var tmpSvg = document.createElement('svg');\n        document.body.appendChild(tmpSvg);\n\n        _.map(nodes, function (n) {\n          var container = document.createElement('div');\n          container.setAttribute('class', n.data['class']);\n          container.style.visibility = 'hidden';\n          container.style.maxWidth = width + 'px';\n\n          var text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\n          container.innerHTML = text;\n\n          tmpSvg.appendChild(container);\n          var height = container.offsetHeight;\n          tmpSvg.removeChild(container);\n\n          maxHeight = Math.max(maxHeight, height);\n          n.cHeight = height;\n          if (n.data.hidden) {\n            n.cWidth = 0;\n          } else {\n            n.cWidth = width;\n          }\n        });\n        document.body.removeChild(tmpSvg);\n\n        return [width, maxHeight];\n      }\n    }, {\n      key: '_marriageSize',\n      value: function _marriageSize(nodes, size) {\n        _.map(nodes, function (n) {\n          if (!n.data.hidden) {\n            n.cHeight = size;\n            n.cWidth = size;\n          }\n        });\n\n        return [size, size];\n      }\n    }, {\n      key: '_nodeRenderer',\n      value: function _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n        var node = '';\n        node += '<div ';\n        node += 'style=\"height:100%;width:100%;\" ';\n        node += 'class=\"' + nodeClass + '\" ';\n        node += 'id=\"node' + id + '\">\\n';\n        node += textRenderer(name, extra, textClass);\n        node += '</div>';\n        return node;\n      }\n    }, {\n      key: '_textRenderer',\n      value: function _textRenderer(name, extra, textClass) {\n        var node = '';\n        node += '<p ';\n        node += 'align=\"center\" ';\n        node += 'class=\"' + textClass + '\">\\n';\n        node += name;\n        node += '</p>\\n';\n        return node;\n      }\n    }, {\n      key: '_marriageRenderer',\n      value: function _marriageRenderer(x, y, height, width, extra, id, nodeClass) {\n        return '<div style=\"height:100%\" class=\"' + nodeClass + '\" id=\"node' + id + '\"></div>';\n      }\n    }, {\n      key: '_debug',\n      value: function _debug(msg) {\n        if (TreeBuilder.DEBUG_LEVEL > 0) {\n          console.log(msg);\n        }\n      }\n    }]);\n\n    return TreeBuilder;\n  })();\n\n  var dTree = {\n\n    VERSION: '2.4.1',\n\n    init: function init(data) {\n      var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\n      var opts = _.defaultsDeep(options || {}, {\n        target: '#graph',\n        debug: false,\n        width: 600,\n        height: 600,\n        hideMarriageNodes: true,\n        callbacks: {\n          nodeClick: function nodeClick(name, extra, id) {},\n          nodeRightClick: function nodeRightClick(name, extra, id) {},\n          marriageClick: function marriageClick(extra, id) {},\n          marriageRightClick: function marriageRightClick(extra, id) {},\n          nodeHeightSeperation: function nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\n            return TreeBuilder._nodeHeightSeperation(nodeWidth, nodeMaxHeight);\n          },\n          nodeRenderer: function nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\n            return TreeBuilder._nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer);\n          },\n          nodeSize: function nodeSize(nodes, width, textRenderer) {\n            return TreeBuilder._nodeSize(nodes, width, textRenderer);\n          },\n          nodeSorter: function nodeSorter(aName, aExtra, bName, bExtra) {\n            return 0;\n          },\n          textRenderer: function textRenderer(name, extra, textClass) {\n            return TreeBuilder._textRenderer(name, extra, textClass);\n          },\n          marriageRenderer: function marriageRenderer(x, y, height, width, extra, id, nodeClass) {\n            return TreeBuilder._marriageRenderer(x, y, height, width, extra, id, nodeClass);\n          },\n          marriageSize: function marriageSize(nodes, size) {\n            return TreeBuilder._marriageSize(nodes, size);\n          }\n        },\n        margin: {\n          top: 0,\n          right: 0,\n          bottom: 0,\n          left: 0\n        },\n        nodeWidth: 100,\n        marriageNodeSize: 10,\n        styles: {\n          node: 'node',\n          marriageNode: 'marriageNode',\n          linage: 'linage',\n          marriage: 'marriage',\n          text: 'nodeText'\n        }\n      });\n\n      var data = this._preprocess(data, opts);\n      var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\n      treeBuilder.create();\n\n      function _zoomTo(x, y) {\n        var zoom = arguments.length <= 2 || arguments[2] === undefined ? 1 : arguments[2];\n        var duration = arguments.length <= 3 || arguments[3] === undefined ? 500 : arguments[3];\n\n        treeBuilder.svg.transition().duration(duration).call(treeBuilder.zoom.transform, d3.zoomIdentity.translate(opts.width / 2, opts.height / 2).scale(zoom).translate(-x, -y));\n      }\n\n      return {\n        resetZoom: function resetZoom() {\n          var duration = arguments.length <= 0 || arguments[0] === undefined ? 500 : arguments[0];\n\n          treeBuilder.svg.transition().duration(duration).call(treeBuilder.zoom.transform, d3.zoomIdentity.translate(opts.width / 2, opts.margin.top).scale(1));\n        },\n        zoomTo: _zoomTo,\n        zoomToNode: function zoomToNode(nodeId) {\n          var zoom = arguments.length <= 1 || arguments[1] === undefined ? 2 : arguments[1];\n          var duration = arguments.length <= 2 || arguments[2] === undefined ? 500 : arguments[2];\n\n          var node = _.find(treeBuilder.allNodes, { data: { id: nodeId } });\n          if (node) {\n            _zoomTo(node.x, node.y, zoom, duration);\n          }\n        },\n        zoomToFit: function zoomToFit() {\n          var duration = arguments.length <= 0 || arguments[0] === undefined ? 500 : arguments[0];\n\n          var groupBounds = treeBuilder.g.node().getBBox();\n          var width = groupBounds.width;\n          var height = groupBounds.height;\n          var fullWidth = treeBuilder.svg.node().clientWidth;\n          var fullHeight = treeBuilder.svg.node().clientHeight;\n          var scale = 0.95 / Math.max(width / fullWidth, height / fullHeight);\n\n          treeBuilder.svg.transition().duration(duration).call(treeBuilder.zoom.transform, d3.zoomIdentity.translate(fullWidth / 2 - scale * (groupBounds.x + width / 2), fullHeight / 2 - scale * (groupBounds.y + height / 2)).scale(scale));\n        }\n      };\n    },\n\n    _preprocess: function _preprocess(data, opts) {\n\n      var siblings = [];\n      var id = 0;\n\n      var root = {\n        name: '',\n        id: id++,\n        hidden: true,\n        children: []\n      };\n\n      var reconstructTree = function reconstructTree(person, parent) {\n\n        // convert to person to d3 node\n        var node = {\n          name: person.name,\n          id: id++,\n          hidden: false,\n          children: [],\n          extra: person.extra,\n          textClass: person.textClass ? person.textClass : opts.styles.text,\n          'class': person['class'] ? person['class'] : opts.styles.node\n        };\n\n        // hide linages to the hidden root node\n        if (parent == root) {\n          node.noParent = true;\n        }\n\n        // apply depth offset\n        for (var i = 0; i < person.depthOffset; i++) {\n          var pushNode = {\n            name: '',\n            id: id++,\n            hidden: true,\n            children: [],\n            noParent: node.noParent\n          };\n          parent.children.push(pushNode);\n          parent = pushNode;\n        }\n\n        // sort children\n        dTree._sortPersons(person.children, opts);\n\n        // add \"direct\" children\n        _.forEach(person.children, function (child) {\n          reconstructTree(child, node);\n        });\n\n        parent.children.push(node);\n\n        //sort marriages\n        dTree._sortMarriages(person.marriages, opts);\n\n        // go through marriage\n        _.forEach(person.marriages, function (marriage, index) {\n          var m = {\n            name: '',\n            id: id++,\n            hidden: opts.hideMarriageNodes,\n            noParent: true,\n            children: [],\n            isMarriage: true,\n            extra: marriage.extra,\n            'class': marriage['class'] ? marriage['class'] : opts.styles.marriageNode\n          };\n\n          var sp = marriage.spouse;\n\n          var spouse = {\n            name: sp.name,\n            id: id++,\n            hidden: false,\n            noParent: true,\n            children: [],\n            textClass: sp.textClass ? sp.textClass : opts.styles.text,\n            'class': sp['class'] ? sp['class'] : opts.styles.node,\n            extra: sp.extra,\n            marriageNode: m\n          };\n\n          parent.children.push(m, spouse);\n\n          dTree._sortPersons(marriage.children, opts);\n          _.forEach(marriage.children, function (child) {\n            reconstructTree(child, m);\n          });\n\n          siblings.push({\n            source: {\n              id: node.id\n            },\n            target: {\n              id: spouse.id\n            },\n            number: index\n          });\n        });\n      };\n\n      _.forEach(data, function (person) {\n        reconstructTree(person, root);\n      });\n\n      return {\n        root: d3.hierarchy(root),\n        siblings: siblings\n      };\n    },\n\n    _sortPersons: function _sortPersons(persons, opts) {\n      if (persons != undefined) {\n        persons.sort(function (a, b) {\n          return opts.callbacks.nodeSorter.call(this, a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return persons;\n    },\n\n    _sortMarriages: function _sortMarriages(marriages, opts) {\n      if (marriages != undefined && Array.isArray(marriages)) {\n        marriages.sort(function (marriageA, marriageB) {\n          var a = marriageA.spouse;\n          var b = marriageB.spouse;\n          return opts.callbacks.nodeSorter.call(this, a.name, a.extra, b.name, b.extra);\n        });\n      }\n      return marriages;\n    }\n\n  };\n\n  return dTree;\n});\n\n","(function (global, factory) {\r\n\ttypeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\r\n\ttypeof define === 'function' && define.amd ? define(factory) :\r\n\t(global.dTree = factory());\r\n}(this, (function () { 'use strict';\r\n\r\nclass TreeBuilder {\r\n\r\n    constructor(root, siblings, opts) {\r\n      TreeBuilder.DEBUG_LEVEL = opts.debug ? 1 : 0;\r\n  \r\n      this.root = root;\r\n      this.siblings = siblings;\r\n      this.opts = opts;\r\n  \r\n      // flatten nodes\r\n      this.allNodes = this._flatten(this.root);\r\n  \r\n      // calculate node sizes\r\n      this.nodeSize = opts.callbacks.nodeSize.call(this,\r\n        // filter hidden and marriage nodes\r\n        _.filter(\r\n          this.allNodes,\r\n          node => !(node.hidden || _.get(node, 'data.isMarriage'))\r\n        ),\r\n        opts.nodeWidth,\r\n        opts.callbacks.textRenderer\r\n      );\r\n      this.marriageSize = opts.callbacks.marriageSize.call(this,\r\n        // filter hidden and non marriage nodes\r\n        _.filter(\r\n          this.allNodes,\r\n          node => !node.hidden && _.get(node, 'data.isMarriage')\r\n        ),\r\n        this.opts.marriageNodeSize\r\n      );\r\n    }\r\n  \r\n    create() {\r\n  \r\n      let opts = this.opts;\r\n      let allNodes = this.allNodes;\r\n      let nodeSize = this.nodeSize;\r\n  \r\n      let width = opts.width + opts.margin.left + opts.margin.right;\r\n      let height = opts.height + opts.margin.top + opts.margin.bottom;\r\n  \r\n      // create zoom handler\r\n      const zoom = this.zoom = d3.zoom()\r\n        .scaleExtent([0.1, 10])\r\n        .on('zoom', function () {\r\n          g.attr('transform', d3.event.transform);\r\n        });\r\n  \r\n      // make a svg\r\n      const svg = this.svg = d3.select(opts.target)\r\n        .append('svg')\r\n        .attr('viewBox', [0, 0, width, height])\r\n        .call(zoom);\r\n  \r\n      // create svg group that holds all nodes\r\n      const g = this.g = svg.append('g');\r\n  \r\n      // set zoom identity\r\n      svg.call(zoom.transform, d3.zoomIdentity.translate(width / 2, opts.margin.top).scale(1));\r\n  \r\n      // Compute the layout.\r\n      this.tree = d3.tree()\r\n        .nodeSize([nodeSize[0] * 2,\r\n                   opts.callbacks.nodeHeightSeperation.call(this, nodeSize[0], nodeSize[1])]);\r\n  \r\n      this.tree.separation(function separation(a, b) {\r\n        if (a.data.hidden || b.data.hidden) {\r\n          return 0.3;\r\n        } else {\r\n          return 0.6;\r\n        }\r\n      });\r\n  \r\n      this._update(this.root);\r\n  \r\n    }\r\n  \r\n    _update(source) {\r\n  \r\n      let opts = this.opts;\r\n      let allNodes = this.allNodes;\r\n      let nodeSize = this.nodeSize;\r\n      let marriageSize = this.marriageSize;\r\n  \r\n      let treenodes = this.tree(source);\r\n      let links = treenodes.links();\r\n  \r\n      // Create the link lines.\r\n      this.g.selectAll('.link')\r\n        .data(links)\r\n        .enter()\r\n        // filter links with no parents to prevent empty nodes\r\n        .filter(function(l) {\r\n          return !l.target.data.noParent;\r\n        })\r\n        .append('path')\r\n        .attr('class', opts.styles.linage)\r\n        .attr('d', this._elbow);\r\n  \r\n      let nodes = this.g.selectAll('.node')\r\n        .data(treenodes.descendants())\r\n        .enter();\r\n  \r\n      this._linkSiblings();\r\n  \r\n      // Draw siblings (marriage)\r\n      this.g.selectAll('.sibling')\r\n        .data(this.siblings)\r\n        .enter()\r\n        .append('path')\r\n        .attr('class', opts.styles.marriage)\r\n        .attr('d', _.bind(this._siblingLine, this));\r\n  \r\n      // Create the node rectangles.\r\n      nodes.append('foreignObject')\r\n        .filter(function(d) {\r\n          return d.data.hidden ? false : true;\r\n        })\r\n        .attr('x', function(d) {\r\n          return Math.round(d.x - d.cWidth / 2) + 'px';\r\n        })\r\n        .attr('y', function(d) {\r\n          return Math.round(d.y - d.cHeight / 2) + 'px';\r\n        })\r\n        .attr('width', function(d) {\r\n          return d.cWidth + 'px';\r\n        })\r\n        .attr('height', function(d) {\r\n          return d.cHeight + 'px';\r\n        })\r\n        .attr('id', function(d) {\r\n          return d.id;\r\n        })\r\n        .html(function(d) {\r\n          if (d.data.isMarriage) {\r\n            return opts.callbacks.marriageRenderer.call(this,\r\n              d.x,\r\n              d.y,\r\n              marriageSize[0],\r\n              marriageSize[1],\r\n              d.data.extra,\r\n              d.data.id,\r\n              d.data.class\r\n            )\r\n          } else {\r\n            return opts.callbacks.nodeRenderer.call(this,\r\n              d.data.name,\r\n              d.x,\r\n              d.y,\r\n              nodeSize[0],\r\n              nodeSize[1],\r\n              d.data.extra,\r\n              d.data.id,\r\n              d.data.class,\r\n              d.data.textClass,\r\n              opts.callbacks.textRenderer\r\n            )\r\n          }\r\n        })\r\n        .on('dblclick', function () {\r\n          // do not propagate a double click on a node\r\n          // to prevent the zoom from being triggered\r\n          d3.event.stopPropagation();\r\n        })\r\n        .on('click', function(d)  {\r\n          // ignore double-clicks and clicks on hidden nodes\r\n          if (d3.event.detail === 2 || d.data.hidden) {\r\n            return;\r\n          }\r\n          if (d.data.isMarriage) {\r\n            opts.callbacks.marriageClick.call(this, d.data.extra, d.data.id);\r\n          } else {\r\n            opts.callbacks.nodeClick.call(this, d.data.name, d.data.extra, d.data.id);\r\n          }\r\n        })\r\n        .on('contextmenu', function(d)  {\r\n          if (d.data.hidden) {\r\n            return;\r\n          }\r\n          d3.event.preventDefault();\r\n          if (d.data.isMarriage) {\r\n            opts.callbacks.marriageRightClick.call(this, d.data.extra, d.data.id);\r\n          } else {\r\n            opts.callbacks.nodeRightClick.call(this, d.data.name, d.data.extra, d.data.id);\r\n          }\r\n        });\r\n    }\r\n  \r\n    _flatten(root) {\r\n      let n = [];\r\n      let i = 0;\r\n  \r\n      function recurse(node) {\r\n        if (node.children) {\r\n          node.children.forEach(recurse);\r\n        }\r\n        if (!node.id) {\r\n          node.id = ++i;\r\n        }\r\n        n.push(node);\r\n      }\r\n      recurse(root);\r\n      return n;\r\n    }\r\n  \r\n    _elbow(d, i) {\r\n      if (d.target.data.noParent) {\r\n        return 'M0,0L0,0';\r\n      }\r\n      let ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\r\n  \r\n      let linedata = [{\r\n        x: d.target.x,\r\n        y: d.target.y\r\n      }, {\r\n        x: d.target.x,\r\n        y: ny\r\n      }, {\r\n        x: d.source.x,\r\n        y: d.source.y\r\n      }];\r\n  \r\n      let fun = d3.line().curve(d3.curveStepAfter)\r\n        .x(function(d) {\r\n          return d.x;\r\n        })\r\n        .y(function(d) {\r\n          return d.y;\r\n        });\r\n      return fun(linedata);\r\n    }\r\n  \r\n    _linkSiblings() {\r\n  \r\n      let allNodes = this.allNodes;\r\n  \r\n      _.forEach(this.siblings, function(d) {\r\n        let start = allNodes.filter(function(v) {\r\n          return d.source.id == v.data.id;\r\n        });\r\n        let end = allNodes.filter(function(v) {\r\n          return d.target.id == v.data.id;\r\n        });\r\n        d.source.x = start[0].x;\r\n        d.source.y = start[0].y;\r\n        d.target.x = end[0].x;\r\n        d.target.y = end[0].y;\r\n  \r\n        let marriageId = (start[0].data.marriageNode != null ?\r\n                          start[0].data.marriageNode.id :\r\n                          end[0].data.marriageNode.id);\r\n        let marriageNode = allNodes.find(function(n) {\r\n          return n.data.id == marriageId;\r\n        });\r\n        d.source.marriageNode = marriageNode;\r\n        d.target.marriageNode = marriageNode;\r\n      });\r\n  \r\n    }\r\n  \r\n    _siblingLine(d, i) {\r\n  \r\n      let ny = Math.round(d.target.y + (d.source.y - d.target.y) * 0.50);\r\n      let nodeWidth = this.nodeSize[0];\r\n      let nodeHeight = this.nodeSize[1];\r\n  \r\n      // Not first marriage\r\n      if (d.number > 0) {\r\n        ny -= Math.round(nodeHeight * 8 / 10);\r\n      }\r\n  \r\n      let linedata = [{\r\n        x: d.source.x,\r\n        y: d.source.y\r\n      }, {\r\n        x: Math.round(d.source.x + nodeWidth * 6 / 10),\r\n        y: d.source.y\r\n      }, {\r\n        x: Math.round(d.source.x + nodeWidth * 6 / 10),\r\n        y: ny\r\n      }, {\r\n        x: d.target.marriageNode.x,\r\n        y: ny\r\n      }, {\r\n        x: d.target.marriageNode.x,\r\n        y: d.target.y\r\n      }, {\r\n        x: d.target.x,\r\n        y: d.target.y\r\n      }];\r\n  \r\n      let fun = d3.line().curve(d3.curveStepAfter)\r\n        .x(function(d) {\r\n          return d.x;\r\n        })\r\n        .y(function(d) {\r\n          return d.y;\r\n        });\r\n      return fun(linedata);\r\n    }\r\n  \r\n    static _nodeHeightSeperation(nodeWidth, nodeMaxHeight) {\r\n      return nodeMaxHeight + 25;\r\n    }\r\n  \r\n    static _nodeSize(nodes, width, textRenderer) {\r\n      let maxWidth = 0;\r\n      let maxHeight = 0;\r\n      let tmpSvg = document.createElement('svg');\r\n      document.body.appendChild(tmpSvg);\r\n  \r\n      _.map(nodes, function(n) {\r\n        let container = document.createElement('div');\r\n        container.setAttribute('class', n.data.class);\r\n        container.style.visibility = 'hidden';\r\n        container.style.maxWidth = width + 'px';\r\n  \r\n        let text = textRenderer(n.data.name, n.data.extra, n.data.textClass);\r\n        container.innerHTML = text;\r\n  \r\n        tmpSvg.appendChild(container);\r\n        let height = container.offsetHeight;\r\n        tmpSvg.removeChild(container);\r\n  \r\n        maxHeight = Math.max(maxHeight, height);\r\n        n.cHeight = height;\r\n        if (n.data.hidden) {\r\n          n.cWidth = 0;\r\n        } else {\r\n          n.cWidth = width;\r\n        }\r\n      });\r\n      document.body.removeChild(tmpSvg);\r\n  \r\n      return [width, maxHeight];\r\n    }\r\n  \r\n    static _marriageSize (nodes, size) {\r\n      _.map(nodes, function (n) {\r\n        if (!n.data.hidden) {\r\n          n.cHeight = size;\r\n          n.cWidth = size;\r\n        }\r\n      });\r\n  \r\n      return [size, size]\r\n    }\r\n  \r\n    static _nodeRenderer(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n      let node = '';\r\n      node += '<div ';\r\n      node += 'style=\"height:100%;width:100%;\" ';\r\n      node += 'class=\"' + nodeClass + '\" ';\r\n      node += 'id=\"node' + id + '\">\\n';\r\n      node += textRenderer(name, extra, textClass);\r\n      node += '</div>';\r\n      return node;\r\n    }\r\n  \r\n    static _textRenderer(name, extra, textClass) {\r\n      let node = '';\r\n      node += '<p ';\r\n      node += 'align=\"center\" ';\r\n      node += 'class=\"' + textClass + '\">\\n';\r\n      node += name;\r\n      node += '</p>\\n';\r\n      return node;\r\n    }\r\n  \r\n    static _marriageRenderer (x, y, height, width, extra, id, nodeClass) {\r\n      return `<div style=\"height:100%\" class=\"${nodeClass}\" id=\"node${id}\"></div>`\r\n    }\r\n  \r\n    static _debug(msg) {\r\n      if (TreeBuilder.DEBUG_LEVEL > 0)  {\r\n        console.log(msg);\r\n      }\r\n    }\r\n  \r\n  }\r\n\r\nconst dTree = {\r\n\r\n  VERSION: '2.4.1',\r\n\r\n  init: function(data, options = {}) {\r\n\r\n    var opts = _.defaultsDeep(options || {}, {\r\n      target: '#graph',\r\n      debug: false,\r\n      width: 600,\r\n      height: 600,\r\n      hideMarriageNodes: true,\r\n      callbacks: {\r\n        nodeClick: function(name, extra, id) {},\r\n        nodeRightClick: function(name, extra, id) {},\r\n        marriageClick: function(extra, id) {},\r\n        marriageRightClick: function(extra, id) {},\r\n        nodeHeightSeperation: function(nodeWidth, nodeMaxHeight) {\r\n          return TreeBuilder._nodeHeightSeperation(nodeWidth, nodeMaxHeight);\r\n        },\r\n        nodeRenderer: function(name, x, y, height, width, extra, id, nodeClass, textClass, textRenderer) {\r\n          return TreeBuilder._nodeRenderer(name, x, y, height, width, extra,\r\n            id,nodeClass, textClass, textRenderer);\r\n        },\r\n        nodeSize: function(nodes, width, textRenderer) {\r\n          return TreeBuilder._nodeSize(nodes, width, textRenderer);\r\n        },\r\n        nodeSorter: function(aName, aExtra, bName, bExtra) {return 0;},\r\n        textRenderer: function(name, extra, textClass) {\r\n          return TreeBuilder._textRenderer(name, extra, textClass);\r\n        },\r\n        marriageRenderer: function (x, y, height, width, extra, id, nodeClass) {\r\n          return TreeBuilder._marriageRenderer(x, y, height, width, extra, id, nodeClass)\r\n        },\r\n        marriageSize: function (nodes, size) {\r\n          return TreeBuilder._marriageSize(nodes, size)\r\n        },\r\n      },\r\n      margin: {\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0\r\n      },\r\n      nodeWidth: 100,\r\n      marriageNodeSize: 10,\r\n      styles: {\r\n        node: 'node',\r\n        marriageNode: 'marriageNode',\r\n        linage: 'linage',\r\n        marriage: 'marriage',\r\n        text: 'nodeText'\r\n      }\r\n    });\r\n\r\n    var data = this._preprocess(data, opts);\r\n    var treeBuilder = new TreeBuilder(data.root, data.siblings, opts);\r\n    treeBuilder.create();\r\n\r\n    function _zoomTo (x, y, zoom = 1, duration = 500) {\r\n      treeBuilder.svg\r\n        .transition()\r\n        .duration(duration)\r\n        .call(\r\n          treeBuilder.zoom.transform,\r\n          d3.zoomIdentity\r\n            .translate(opts.width / 2, opts.height / 2)\r\n            .scale(zoom)\r\n            .translate(-x, -y)\r\n        );\r\n    }\r\n\r\n    return {\r\n      resetZoom: function (duration = 500) {\r\n        treeBuilder.svg\r\n          .transition()\r\n          .duration(duration)\r\n          .call(\r\n            treeBuilder.zoom.transform,\r\n            d3.zoomIdentity.translate(opts.width / 2, opts.margin.top).scale(1)\r\n          );\r\n      },\r\n      zoomTo: _zoomTo,\r\n      zoomToNode: function (nodeId, zoom = 2, duration = 500) {\r\n        const node = _.find(treeBuilder.allNodes, {data: {id: nodeId}});\r\n        if (node) {\r\n          _zoomTo(node.x, node.y, zoom, duration);\r\n        }\r\n      },\r\n      zoomToFit: function (duration = 500) {\r\n        const groupBounds = treeBuilder.g.node().getBBox();\r\n        const width = groupBounds.width;\r\n        const height = groupBounds.height;\r\n        const fullWidth = treeBuilder.svg.node().clientWidth;\r\n        const fullHeight = treeBuilder.svg.node().clientHeight;\r\n        const scale = 0.95 / Math.max(width / fullWidth, height / fullHeight);\r\n\r\n        treeBuilder.svg\r\n          .transition()\r\n          .duration(duration)\r\n          .call(\r\n            treeBuilder.zoom.transform,\r\n            d3.zoomIdentity\r\n              .translate(\r\n                fullWidth / 2 - scale * (groupBounds.x + width / 2),\r\n                fullHeight / 2 - scale * (groupBounds.y + height / 2)\r\n              )\r\n              .scale(scale)\r\n          );\r\n      }\r\n    }\r\n  },\r\n\r\n  _preprocess: function(data, opts) {\r\n\r\n    var siblings = [];\r\n    var id = 0;\r\n\r\n    var root = {\r\n      name: '',\r\n      id: id++,\r\n      hidden: true,\r\n      children: []\r\n    };\r\n\r\n    var reconstructTree = function(person, parent) {\r\n\r\n      // convert to person to d3 node\r\n      var node = {\r\n        name: person.name,\r\n        id: id++,\r\n        hidden: false,\r\n        children: [],\r\n        extra: person.extra,\r\n        textClass: person.textClass ? person.textClass : opts.styles.text,\r\n        class: person.class ? person.class : opts.styles.node\r\n      };\r\n\r\n      // hide linages to the hidden root node\r\n      if (parent == root) {\r\n        node.noParent = true;\r\n      }\r\n\r\n      // apply depth offset\r\n      for (var i = 0; i < person.depthOffset; i++) {\r\n        var pushNode = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: true,\r\n          children: [],\r\n          noParent: node.noParent\r\n        };\r\n        parent.children.push(pushNode);\r\n        parent = pushNode;\r\n      }\r\n\r\n      // sort children\r\n      dTree._sortPersons(person.children, opts);\r\n\r\n      // add \"direct\" children\r\n      _.forEach(person.children, function(child) {\r\n        reconstructTree(child, node);\r\n      });\r\n\r\n      parent.children.push(node);\r\n\r\n      //sort marriages\r\n      dTree._sortMarriages(person.marriages, opts);\r\n\r\n      // go through marriage\r\n      _.forEach(person.marriages, function(marriage, index) {\r\n        var m = {\r\n          name: '',\r\n          id: id++,\r\n          hidden: opts.hideMarriageNodes,\r\n          noParent: true,\r\n          children: [],\r\n          isMarriage: true,\r\n          extra: marriage.extra,\r\n          class: marriage.class ? marriage.class : opts.styles.marriageNode\r\n        };\r\n\r\n        var sp = marriage.spouse;\r\n\r\n        var spouse = {\r\n          name: sp.name,\r\n          id: id++,\r\n          hidden: false,\r\n          noParent: true,\r\n          children: [],\r\n          textClass: sp.textClass ? sp.textClass : opts.styles.text,\r\n          class: sp.class ? sp.class : opts.styles.node,\r\n          extra: sp.extra,\r\n          marriageNode: m\r\n        };\r\n\r\n        parent.children.push(m, spouse);\r\n\r\n        dTree._sortPersons(marriage.children, opts);\r\n        _.forEach(marriage.children, function(child) {\r\n          reconstructTree(child, m);\r\n        });\r\n\r\n        siblings.push({\r\n          source: {\r\n            id: node.id\r\n          },\r\n          target: {\r\n            id: spouse.id\r\n          },\r\n          number: index\r\n        });\r\n      });\r\n\r\n    };\r\n\r\n    _.forEach(data, function(person) {\r\n      reconstructTree(person, root);\r\n    });\r\n\r\n    return {\r\n      root: d3.hierarchy(root),\r\n      siblings: siblings\r\n    };\r\n\r\n  },\r\n\r\n  _sortPersons: function(persons, opts) {\r\n    if (persons != undefined) {\r\n      persons.sort(function(a, b) {\r\n        return opts.callbacks.nodeSorter.call(this, a.name, a.extra, b.name, b.extra);\r\n      });\r\n    }\r\n    return persons;\r\n  },\r\n\r\n  _sortMarriages: function(marriages, opts) {\r\n    if (marriages != undefined && Array.isArray(marriages)) {\r\n      marriages.sort(function(marriageA, marriageB) {\r\n        var a = marriageA.spouse;\r\n        var b = marriageB.spouse;\r\n        return opts.callbacks.nodeSorter.call(this, a.name, a.extra, b.name, b.extra);\r\n      });\r\n    }\r\n    return marriages;\r\n  }\r\n\r\n};\r\n\r\nreturn dTree;\r\n\r\n})));\r\n"]}